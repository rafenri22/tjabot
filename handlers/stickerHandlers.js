const { MessageMedia } = require("whatsapp-web.js");
const sharp = require("sharp");
const BotHelpers = require("../utils/helpers");

class StickerHandlers {
  constructor(client) {
    this.client = client;
  }

  // Handler untuk command /stiker
  async handleStikerCommand(message) {
    try {
      // Check if message has media
      if (!message.hasMedia) {
        const noMediaResponses = [
          "‚ùå Eh mana fotonya? Masa mau bikin stiker dari angin? üå™Ô∏è",
          "‚ùå Foto kosong = stiker kosong! Logic banget kan? üß†",
          "‚ùå Kirim foto dulu dong sebelum minta dibuatin stiker! üì∏",
          "‚ùå Stiker tanpa gambar? Inovasi banget tuh! üòÇ",
          "‚ùå Mau bikin stiker invisible ya? Saya bukan sulap bos! üé©‚ú®",
          "‚ùå Format: Kirim foto + caption /stiker. Jangan setengah-setengah! üì∑",
          "‚ùå Foto mana foto? Jangan cuma modal nekat doang! üòè",
          "‚ùå Saya butuh bahan mentah (foto) untuk bikin stiker! üçØ",
        ];
        const randomResponse =
          noMediaResponses[Math.floor(Math.random() * noMediaResponses.length)];
        await message.reply(randomResponse);
        return;
      }

      // Send processing message
      const processingMessages = [
        "üé® Sedang memproses foto jadi stiker keren... Tunggu ya! ‚ú®",
        "‚ö° Mengaktifkan mesin pembuat stiker... Loading 99%... üîÑ",
        "üñºÔ∏è Foto sedang dijadikan stiker premium... Almost done! üí´",
        "üé≠ Transforming your image into awesome sticker... Wait! üöÄ",
        "üåü Magic is happening... Your sticker is being crafted! ‚ú®",
        "üí´ Proses konversi dimulai... Stiker akan segera jadi! üé®",
        "üîÆ Abracadabra! Foto lagi berubah jadi stiker... Tunggu! ‚ö°",
        "üé™ Pertunjukan sulap dimulai... Foto ‚Üí Stiker! üé≠‚ú®",
      ];
      const randomProcessing =
        processingMessages[
          Math.floor(Math.random() * processingMessages.length)
        ];
      await message.reply(randomProcessing);

      // Download the media
      const media = await message.downloadMedia();
      if (!media) {
        const downloadErrors = [
          "‚ùå Gagal download foto! Mungkin fotonya lagi malu üì∏üò≥",
          "‚ùå Error download! Foto terlalu cantik sampai server minder üòÖ",
          "‚ùå Download failed! Koneksi lagi mood-an ya? üì°üí¢",
          "‚ùå Foto nggak bisa diambil! Mungkin dikunci password? üîê",
        ];
        const randomError =
          downloadErrors[Math.floor(Math.random() * downloadErrors.length)];
        await message.reply(randomError);
        return;
      }

      // Check if it's an image
      if (!media.mimetype.startsWith("image/")) {
        const notImageResponses = [
          "‚ùå Ini bukan foto bos! Stiker cuma bisa dari gambar üñºÔ∏è",
          "‚ùå File type error! Saya butuh foto, bukan file random üìÅ",
          "‚ùå Hanya foto yang bisa dijadiin stiker! Try again! üì∑",
          "‚ùå Format tidak supported! Kirim gambar dong, bukan dokumen üìã",
        ];
        const randomNotImage =
          notImageResponses[
            Math.floor(Math.random() * notImageResponses.length)
          ];
        await message.reply(randomNotImage);
        return;
      }

      // Convert image to sticker format using sharp
      const inputBuffer = Buffer.from(media.data, "base64");

      // Process image to be sticker-compatible (512x512 WebP with transparent background)
      const processedBuffer = await sharp(inputBuffer)
        .resize(512, 512, {
          fit: "contain",
          background: { r: 0, g: 0, b: 0, alpha: 0 }, // Transparent background
        })
        .webp({
          quality: 90,
          effort: 6,
        })
        .toBuffer();

      // Create MessageMedia for sticker
      const stickerMedia = new MessageMedia(
        "image/webp",
        processedBuffer.toString("base64"),
        "sticker.webp"
      );

      // Send as sticker
      await message.reply(stickerMedia, undefined, { sendAsSticker: true });

      // Send success message with random response
      const successMessages = [
        "‚úÖ Tadaa! Stiker keren berhasil dibuat! Sip banget kan? üéâ‚ú®",
        "üé® Masterpiece stiker completed! Karyeni seni terbaru nih! üñºÔ∏èüèÜ",
        "üöÄ Mission accomplished! Stiker premium ready to use! üí´",
        "‚ö° Boom! Foto udah berubah jadi stiker kece! Magic! ‚ú®üé≠",
        "üéä Success! Your custom sticker is ready to rock! üî•",
        "üíé Perfect sticker created! Dijamin bikin chat makin seru! üé™",
        "üåü Voila! Stiker eksklusif hasil karya bot keren! üòé‚ú®",
        "üèÖ Stiker berkualitas tinggi berhasil diproduksi! Top! ü•á",
        "üéØ Bullseye! Stiker jadi dengan sempurna! üé®üéâ",
        "üí´ Abracadabra! Foto transformation complete! üîÆ‚ú®",
      ];
      const randomSuccess =
        successMessages[Math.floor(Math.random() * successMessages.length)];

      await BotHelpers.delay(1000);
      await message.reply(randomSuccess);
    } catch (error) {
      console.error("Error handling stiker command:", error);
      const errorResponses = [
        "‚ùå Error bikin stiker! Mesin pembuat stiker lagi maintenance üîß",
        "‚ùå Gagal convert foto! Mungkin fotonya terlalu perfect üòÖ",
        "‚ùå Processing error! Server lagi capek bikin stiker üí§",
        "‚ùå Oops! Ada gangguan di pabrik stiker digital üè≠üí•",
        "‚ùå System malfunction! Coba lagi atau foto yang lain üîÑ",
        "‚ùå Stiker machine breakdown! Engineer lagi dipanggil üë®‚Äçüîß",
        "‚ùå Error 500: Terlalu banyak permintaan stiker hari ini üìä",
        "‚ùå Magic spell failed! Coba lagi dengan foto yang berbeda ‚ú®üí•",
      ];
      const randomError =
        errorResponses[Math.floor(Math.random() * errorResponses.length)];
      await message.reply(randomError);
    }
  }

  // Helper function to validate image dimensions and size
  async validateImage(buffer) {
    try {
      const metadata = await sharp(buffer).metadata();

      // Check file size (max 1MB for performance)
      if (buffer.length > 1024 * 1024) {
        return { valid: false, reason: "File terlalu besar! Max 1MB ya üìè" };
      }

      // Check if image has valid dimensions
      if (!metadata.width || !metadata.height) {
        return { valid: false, reason: "Format gambar tidak valid üñºÔ∏è" };
      }

      return { valid: true };
    } catch (error) {
      return { valid: false, reason: "Gagal memproses gambar üîç" };
    }
  }

  // Advanced sticker with custom effects
  async createCustomSticker(inputBuffer, effect = "normal") {
    try {
      let sharpInstance = sharp(inputBuffer).resize(512, 512, {
        fit: "contain",
        background: { r: 0, g: 0, b: 0, alpha: 0 },
      });

      // Apply effects based on parameter
      switch (effect) {
        case "blur":
          sharpInstance = sharpInstance.blur(2);
          break;
        case "sharpen":
          sharpInstance = sharpInstance.sharpen();
          break;
        case "grayscale":
          sharpInstance = sharpInstance.grayscale();
          break;
        case "vintage":
          sharpInstance = sharpInstance.modulate({
            saturation: 0.8,
            brightness: 0.9,
            hue: 30,
          });
          break;
        default:
          // Normal processing
          break;
      }

      return await sharpInstance
        .webp({
          quality: 90,
          effort: 6,
        })
        .toBuffer();
    } catch (error) {
      throw new Error("Failed to create custom sticker: " + error.message);
    }
  }
}

module.exports = StickerHandlers;
